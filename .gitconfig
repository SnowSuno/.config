[include]
  path = ~/.gitconfig.local
[commit]
	gpgsign = true
[push]
	autoSetupRemote = true
[alias]
	alias = "!# Prints all aliases.;\n\
    		git config --list \
    		| egrep '^alias.+' \
    		| sed -e 's/^alias\\.//' \
    		| sed -e 's/^[^=]*=/\\'$'\\033[31m&\\033[(B\\033[m/' \
    		| column -t -s'=' \
    		| sed 's/!#* *//; s/;$//' \
    		| cut -c1-85"
	b0 = "!git branch | awk '/^\\*/{print $2}'"
	cleanbranch = "!git branch -d $(git branch --merged | grep -v '^\\*\\|\\<master$')"
	rebase-onto = "!f() { git rebase --onto main $(git merge-base \"$1\" \"$2\") \"$1\"; }; f"
	update = "!f() { git fetch origin $1:$1; }; f"
  resolve = "!f() { git restore --source=main yarn.lock; yarn; git add yarn.lock .yarn; git merge --continue; }; f"
	main = "!git fetch origin main:main"
	gone = ! git fetch -p && git for-each-ref --format '%(refname:short) %(upstream:track)' | awk '$2 == \"[gone]\" {print $1}' | xargs -r git branch -D
  rebase-sq = "!f() { \
    TARGET_BRANCH="${@: -1}"; \
    SOURCE_BRANCH=$(git rev-parse --abbrev-ref HEAD); \
    BASE_COMMIT=$(git merge-base "$SOURCE_BRANCH" "$TARGET_BRANCH"); \
    git rebase --onto "$TARGET_BRANCH" "$BASE_COMMIT" "$SOURCE_BRANCH"; \
  }; f"
  rb = "!f() { git rebase --onto \"$1\" $(git merge-base \"$1\" HEAD); }; f"


[core]
    pager = delta

[interactive]
    diffFilter = delta --color-only

[delta]
  navigate = true    # use n and N to move between diff sections
  minus-style                   = syntax "#3a273a"
  minus-non-emph-style          = syntax "#3a273a"
  minus-emph-style              = syntax "#6b2e43"
  minus-empty-line-marker-style = syntax "#3a273a"
  line-numbers-minus-style      = "#e26a75"
  plus-style                    = syntax "#273849"
  plus-non-emph-style           = syntax "#273849"
  plus-emph-style               = syntax "#305f6f"
  plus-empty-line-marker-style  = syntax "#273849"
  line-numbers-plus-style       = "#b8db87"
  line-numbers-zero-style       = "#3b4261"

[merge]
    conflictstyle = diff3

[diff]
    colorMoved = default
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
